// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING     
  PROCESSING  
  DELIVERED   
  CANCELED    
}

enum PaymentMethod {
  CASH
  DEBIT
  CREDIT
  PIX
}

model User {
  id        Int   @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String   
  role      Role     @default(USER)
  address   Address? 

  orders Order[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users") 
}

model Address {
  id          Int   @id @default(autoincrement())
  street      String
  number      String
  complement  String? 
  district    String  
  city        String
  state       String
  zipCode     String  

  user        User    @relation(fields: [userId], references: [id])
  userId      Int  @unique 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Category {
  id        Int   @id @default(autoincrement())
  name      String    @unique 

  products Product[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Product {
  id          Int   @id @default(autoincrement())
  name        String
  description String?
  price       Float    
  imageUrl    String?  

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int   

  orderItems OrderItem[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Order {
  id        Int   @id @default(autoincrement())
  status    OrderStatus @default(PENDING)
  totalPrice Float     

  user      User     @relation(fields: [userId], references: [id])
  userId    Int   
  paymentMethod PaymentMethod   

  items     OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  quantity  Int    
  price     Float   

  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int  

  product   Product @relation(fields: [productId], references: [id])
  productId Int  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}
